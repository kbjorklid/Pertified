openapi: 3.0.3
info:
  title: Pertified Users API
  description: REST API for the Users module in Pertified project planning system
  version: 1.0.0
  contact:
    name: Pertified API Support
servers:
  - url: /api/v1
    description: Version 1 API
paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of users with optional filtering and sorting
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Maximum number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: sort
          in: query
          description: Sort users by field (prefix with - for descending)
          required: false
          schema:
            type: string
            enum: [createdAt, -createdAt, email, -email, userName, -userName, lastLoginAt, -lastLoginAt]
        - name: email
          in: query
          description: Filter users by email address
          required: false
          schema:
            type: string
            format: email
        - name: userName
          in: query
          description: Filter users by username
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDto'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Users
      summary: Register a new user
      description: Create a new user account with email and username
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserCommand'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUserResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email or username already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - Users
      summary: Update user
      description: Update user email and/or username
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Email or username already in use by another user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user from the system
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        userName:
          type: string
          description: User's chosen username
          example: "john_doe"
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$|^[a-zA-Z0-9]$"
        createdAt:
          type: string
          format: date-time
          description: When the user account was created
          example: "2024-01-15T10:30:00.000Z"
        lastLoginAt:
          type: string
          format: date-time
          description: When the user last logged in
          example: "2024-01-20T14:45:30.000Z"
      required:
        - id
        - email
        - userName
        - createdAt

    AddUserCommand:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        userName:
          type: string
          description: User's chosen username
          example: "john_doe"
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$|^[a-zA-Z0-9]$"
      required:
        - email
        - userName

    AddUserResult:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the created user
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        userName:
          type: string
          description: User's chosen username
          example: "john_doe"
      required:
        - userId
        - email
        - userName

    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        userName:
          type: string
          description: User's chosen username
          example: "john_doe"
        createdAt:
          type: string
          format: date-time
          description: When the user account was created
          example: "2024-01-15T10:30:00.000Z"
        lastLoginAt:
          type: string
          format: date-time
          description: When the user last logged in
          example: "2024-01-20T14:45:30.000Z"
      required:
        - id
        - email
        - userName
        - createdAt

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: New email address for the user
          example: "john.newemail@example.com"
        userName:
          type: string
          description: New username for the user
          example: "john_new_name"
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$|^[a-zA-Z0-9]$"
      minProperties: 1

    PaginationInfo:
      type: object
      properties:
        totalItems:
          type: integer
          description: Total number of items available
          example: 1230
        totalPages:
          type: integer
          description: Total number of pages available
          example: 13
        currentPage:
          type: integer
          description: Current page number
          example: 2
        limit:
          type: integer
          description: Maximum number of items per page
          example: 100
      required:
        - totalItems
        - totalPages
        - currentPage
        - limit

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      required:
        - errors

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code for programmatic handling
          example: "USER_EMAIL_ALREADY_IN_USE"
        message:
          type: string
          description: Human-readable error message
          example: "The provided email address is already in use by another user"
        field:
          type: string
          description: The specific field that caused the error (if applicable)
          example: "email"
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Invalid request data or validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - code: "VALIDATION_ERROR"
                message: "Email address format is invalid"
                field: "email"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - code: "AUTH_REQUIRED"
                message: "Authentication is required to access this resource"

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - code: "ACCESS_DENIED"
                message: "You do not have permission to access this resource"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - code: "USER_NOT_FOUND"
                message: "The requested user does not exist"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []